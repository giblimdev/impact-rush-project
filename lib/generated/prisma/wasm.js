
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roles: 'roles'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  idToken: 'idToken',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  age: 'age',
  profession: 'profession',
  motivation: 'motivation',
  interests: 'interests',
  experience: 'experience',
  disponibility: 'disponibility',
  bio: 'bio',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  phoneVerified: 'phoneVerified'
};

exports.Prisma.AdressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  subtitle: 'subtitle',
  content: 'content',
  contentText: 'contentText',
  excerpt: 'excerpt',
  coverImageUrl: 'coverImageUrl',
  canonicalUrl: 'canonicalUrl',
  ogImageUrl: 'ogImageUrl',
  status: 'status',
  visibility: 'visibility',
  publishedAt: 'publishedAt',
  scheduledAt: 'scheduledAt',
  readingTime: 'readingTime',
  wordCount: 'wordCount',
  language: 'language',
  authorId: 'authorId',
  parentId: 'parentId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaAssetScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  type: 'type',
  url: 'url',
  provider: 'provider',
  title: 'title',
  alt: 'alt',
  caption: 'caption',
  position: 'position',
  mimeType: 'mimeType',
  sizeBytes: 'sizeBytes',
  width: 'width',
  height: 'height',
  durationMs: 'durationMs',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CodeSnippetScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  title: 'title',
  language: 'language',
  filename: 'filename',
  code: 'code',
  highlightedHtml: 'highlightedHtml',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostsOnTagsScalarFieldEnum = {
  postId: 'postId',
  tagId: 'tagId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostsOnCategoriesScalarFieldEnum = {
  postId: 'postId',
  categoryId: 'categoryId',
  position: 'position',
  assignedAt: 'assignedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId',
  content: 'content',
  contentText: 'contentText',
  status: 'status',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  type: 'type',
  status: 'status',
  category: 'category',
  location: 'location',
  fundingGoal: 'fundingGoal',
  amountRaised: 'amountRaised',
  currency: 'currency',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  ownerId: 'ownerId',
  organization: 'organization',
  legalStatus: 'legalStatus',
  website: 'website',
  socialMedia: 'socialMedia',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  impactTypes: 'impactTypes',
  impactDescription: 'impactDescription',
  impactIndicators: 'impactIndicators',
  sdgAlignment: 'sdgAlignment',
  images: 'images',
  videos: 'videos',
  documents: 'documents',
  visibility: 'visibility',
  allowComments: 'allowComments',
  enableImpactSprint: 'enableImpactSprint',
  valuation: 'valuation',
  minInvestment: 'minInvestment',
  capitalPercentage: 'capitalPercentage',
  expectedInvestors: 'expectedInvestors',
  taxAdvantages: 'taxAdvantages',
  interestRate: 'interestRate',
  loanDuration: 'loanDuration',
  repaymentFrequency: 'repaymentFrequency',
  minLoanAmount: 'minLoanAmount',
  guarantees: 'guarantees',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.ProjectUpdateScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  content: 'content',
  images: 'images',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectRewardScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  amount: 'amount',
  title: 'title',
  description: 'description',
  image: 'image',
  deliveryDate: 'deliveryDate',
  quantity: 'quantity',
  claimed: 'claimed'
};

exports.Prisma.ProjectDonationScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  amount: 'amount',
  isAnonymous: 'isAnonymous',
  message: 'message',
  rewardId: 'rewardId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectInvestmentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  amount: 'amount',
  shares: 'shares',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectLoanScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.CircleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  type: 'type',
  theme: 'theme',
  participationMode: 'participationMode',
  maxMembers: 'maxMembers',
  isPublic: 'isPublic',
  isActive: 'isActive',
  monthlyFee: 'monthlyFee',
  funds: 'funds',
  allocatedFunds: 'allocatedFunds',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CircleMemberScalarFieldEnum = {
  id: 'id',
  circleId: 'circleId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  xp: 'xp',
  level: 'level'
};

exports.Prisma.CircleProjectScalarFieldEnum = {
  id: 'id',
  circleId: 'circleId',
  projectId: 'projectId',
  allocatedAmount: 'allocatedAmount',
  supportType: 'supportType',
  votedAt: 'votedAt',
  status: 'status'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  projectId: 'projectId',
  circleId: 'circleId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserXPScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalXP: 'totalXP',
  level: 'level',
  impactRank: 'impactRank',
  donationXP: 'donationXP',
  investmentXP: 'investmentXP',
  contentXP: 'contentXP',
  communityXP: 'communityXP',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  criteria: 'criteria',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  DEV: 'DEV',
  AUTHOR: 'AUTHOR',
  MODERATOR: 'MODERATOR',
  OWNER: 'OWNER',
  MEMBER: 'MEMBER',
  VISITOR: 'VISITOR'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  SCHEDULED: 'SCHEDULED',
  ARCHIVED: 'ARCHIVED'
};

exports.PostVisibility = exports.$Enums.PostVisibility = {
  PUBLIC: 'PUBLIC',
  UNLISTED: 'UNLISTED',
  PRIVATE: 'PRIVATE'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  FILE: 'FILE',
  EMBED: 'EMBED',
  CODE: 'CODE'
};

exports.CommentStatus = exports.$Enums.CommentStatus = {
  VISIBLE: 'VISIBLE',
  HIDDEN: 'HIDDEN',
  SPAM: 'SPAM',
  DELETED: 'DELETED'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  CLAP: 'CLAP',
  UPVOTE: 'UPVOTE',
  DOWNVOTE: 'DOWNVOTE',
  LOVE: 'LOVE'
};

exports.ProjectType = exports.$Enums.ProjectType = {
  DONATION: 'DONATION',
  REWARD: 'REWARD',
  EQUITY: 'EQUITY',
  CROWDLENDING: 'CROWDLENDING',
  KITTY: 'KITTY',
  IMPACT_SPRINT: 'IMPACT_SPRINT'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUCCESSFUL: 'SUCCESSFUL',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  SUSPENDED: 'SUSPENDED'
};

exports.ProjectCategory = exports.$Enums.ProjectCategory = {
  ECOLOGY: 'ECOLOGY',
  SOCIAL: 'SOCIAL',
  EDUCATION: 'EDUCATION',
  TECHNOLOGY: 'TECHNOLOGY',
  HEALTH: 'HEALTH',
  CULTURE: 'CULTURE',
  INNOVATION: 'INNOVATION',
  OTHER: 'OTHER'
};

exports.ProjectImpactType = exports.$Enums.ProjectImpactType = {
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  SOCIAL: 'SOCIAL',
  ECONOMIC: 'ECONOMIC'
};

exports.CircleType = exports.$Enums.CircleType = {
  THEMATIC: 'THEMATIC',
  SUPPORT: 'SUPPORT',
  SYNERGY: 'SYNERGY'
};

exports.CircleParticipationMode = exports.$Enums.CircleParticipationMode = {
  SYNCHRONOUS: 'SYNCHRONOUS',
  ASYNCHRONOUS: 'ASYNCHRONOUS'
};

exports.CircleMemberRole = exports.$Enums.CircleMemberRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  FACILITATOR: 'FACILITATOR',
  SECRETARY: 'SECRETARY',
  PROJECT_REFERENT: 'PROJECT_REFERENT',
  ETHICS_GUARDIAN: 'ETHICS_GUARDIAN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Profile: 'Profile',
  adress: 'adress',
  Post: 'Post',
  MediaAsset: 'MediaAsset',
  CodeSnippet: 'CodeSnippet',
  Tag: 'Tag',
  PostsOnTags: 'PostsOnTags',
  Category: 'Category',
  PostsOnCategories: 'PostsOnCategories',
  Comment: 'Comment',
  Reaction: 'Reaction',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  ProjectUpdate: 'ProjectUpdate',
  ProjectReward: 'ProjectReward',
  ProjectDonation: 'ProjectDonation',
  ProjectInvestment: 'ProjectInvestment',
  ProjectLoan: 'ProjectLoan',
  Circle: 'Circle',
  CircleMember: 'CircleMember',
  CircleProject: 'CircleProject',
  Transaction: 'Transaction',
  UserXP: 'UserXP',
  Badge: 'Badge',
  UserBadge: 'UserBadge'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
